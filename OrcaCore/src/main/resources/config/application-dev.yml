# ===================================================================
# Spring Boot configuration. This is the dev profile configuration file.
# ===================================================================
# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================
#
# Configure the log levels for logging.
logging:
  level:
    ROOT: INFO
    com.ktk.orca.core: DEBUG
    org.springframework.web: INFO
    io.dropwizard.metrics: ERROR
    org.hibernate.engine: ERROR
#
#    org.springframework
#
#
#
spring:
  profiles:
    active: dev, default
    include: swagger
  devtools:
    restart:
      enabled: true
    livereload:
      enabled: false # we use Webpack dev server + BrowserSync for livereload
  jackson:
    serialization.indent_output: true
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:mysql://localhost:3306/dev?useUnicode=true&characterEncoding=utf8&useSSL=false
    username: dev
    password: dev
    hikari:
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
  jpa:
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    database: MYSQL
    show-sql: true
    properties:
      hibernate.id.new_generator_mappings: true
      hibernate.cache.use_second_level_cache: true
      hibernate.cache.use_query_cache: false
      hibernate.generate_statistics: true
      hibernate.cache.region.factory_class: org.hibernate.cache.ehcache.EhCacheRegionFactory
      hibernate.cache.provider_class: org.hibernate.cache.EhCacheProvider
  liquibase:
    contexts: dev
  messages:
    cache-duration: PT1S # 1 second, see the ISO 8601 standard
# ===================================================================
# To enable SSL, generate a certificate using:
# keytool -genkey -alias monolith -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# https://maximilian-boehm.com/hp2121/Create-a-Java-Keystore-JKS-from-Let-s-Encrypt-Certificates.htm
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#
# server:
#    port: 8443
#    ssl:
#        key-store: keystore.p12
#        key-store-password: <your-password>
#        key-store-type: PKCS12
#        key-alias: monolith
# ===================================================================
server:
  port: 8080

#
application:
  clientApiDebugEnabled: false
  restTemplateConfig:
    readTimeout: 15500
    connectTimeout: 15500
  orcaApi:
    headerTag: "x-api-key"
    accessToken: ""
    baseUri: ""
    authUri: ""
    readTimeout: 15500
    connectTimeout: 15500
  fname: core-application-dev.yml